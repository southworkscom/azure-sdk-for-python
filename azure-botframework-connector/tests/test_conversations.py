# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
import pytest
from azure_devtools.scenario_tests import ReplayableTest

from azure.botframework.connector import BotConnector
from azure.botframework.connectorauth import MicrosoftTokenAuthentication
from azure.botframework.connector import models

from authentication_stub import MicrosoftTokenAuthenticationStub

SERVICE_URL = 'https://slack.botframework.com'
CHANNEL_ID = 'slack'
BOT_NAME = 'botbuilder-pc-bot'
BOT_ID = 'B21UTEF8S:T03CWQ0QB'
RECIPIENT_ID = 'U19KH8EHJ:T03CWQ0QB'
CONVERSATION_ID = 'B21UTEF8S:T03CWQ0QB:D2369CT7C'


def get_auth_token():
    try:
        import app_creds_real
        # Define a "app_creds_real.py" file with your bot credentials as follows:
        # MICROSOFT_APP_ID = '...'
        # MICROSOFT_APP_PASSWORD = '...'
        return MicrosoftTokenAuthentication(
            app_creds_real.MICROSOFT_APP_ID,
            app_creds_real.MICROSOFT_APP_PASSWORD).get_accessToken()
    except ImportError:
        return 'STUB_ACCESS_TOKEN'


auth_token = get_auth_token()


class ConversationTest(ReplayableTest):
    def __init__(self, method_name):
        super(ConversationTest, self).__init__(method_name)

    @property
    def credentials(self):
        return MicrosoftTokenAuthenticationStub(auth_token)

    def test_conversations_create_conversation(self):
        connector = BotConnector(self.credentials, base_url=SERVICE_URL)

        to = models.ChannelAccount(id=RECIPIENT_ID)
        create_conversation = models.ConversationParameters(
            bot=models.ChannelAccount(id=BOT_ID),
            members=[to])
        create_conversation.activity = models.Activity(
            type=models.ActivityType.message,
            channel_id=CHANNEL_ID,
            from_property=models.ChannelAccount(id=BOT_ID),
            recipient=to,
            text='Hi there!')

        conversation = connector.conversations.create_conversation(
            create_conversation)

        assert conversation.id is not None

    def test_conversations_send_to_conversation(self):
        connector = BotConnector(self.credentials, base_url=SERVICE_URL)

        activity = models.Activity(
            type=models.ActivityType.message,
            channel_id=CHANNEL_ID,
            recipient=models.ChannelAccount(id=RECIPIENT_ID),
            from_property=models.ChannelAccount(id=BOT_ID),
            text='Hello again!')

        response = connector.conversations.send_to_conversation(
            CONVERSATION_ID, activity)

        assert response is not None

    def test_conversations_send_to_conversation_with_attachment(self):
        connector = BotConnector(self.credentials, base_url=SERVICE_URL)

        card1 = models.HeroCard(
            title='A static image',
            text='JPEG image',
            images=[
                models.CardImage(url='https://docs.microsoft.com/en-us/bot-framework/media/designing-bots/core/dialogs-screens.png')
            ])

        card2 = models.HeroCard(
            title='An animation',
            subtitle='GIF image',
            images=[
                models.CardImage(url='http://i.giphy.com/Ki55RUbOV5njy.gif')
            ])

        activity = models.Activity(
            type=models.ActivityType.message,
            channel_id=CHANNEL_ID,
            recipient=models.ChannelAccount(id=RECIPIENT_ID),
            from_property=models.ChannelAccount(id=BOT_ID),
            attachment_layout=models.AttachmentLayout.list,
            attachments=[
                models.Attachment(content_type=models.CardContentType.hero, content=card1),
                models.Attachment(content_type=models.CardContentType.hero, content=card2),
            ])

        response = connector.conversations.send_to_conversation(CONVERSATION_ID, activity)

        assert response is not None

    def test_conversations_send_to_conversation_with_invalid_conversation_id_fails(
            self):

        with pytest.raises(models.error_response.ErrorResponseException) as excinfo:
            connector = BotConnector(self.credentials, base_url=SERVICE_URL)

            activity = models.Activity(
                type=models.ActivityType.message,
                channel_id=CHANNEL_ID,
                recipient=models.ChannelAccount(id=RECIPIENT_ID),
                from_property=models.ChannelAccount(id=BOT_ID),
                text='Error!')

            connector.conversations.send_to_conversation('123', activity)

        assert excinfo.value.error.error.code == 'ServiceError'
        assert ('cannot send messages to this id' in str(excinfo.value.error.error.message)
                or 'Invalid ConversationId' in str(excinfo.value.error.error.message))

    def test_conversations_get_conversation_members(self):
        connector = BotConnector(self.credentials, base_url=SERVICE_URL)

        members = connector.conversations.get_conversation_members(CONVERSATION_ID)

        assert len(members) == 2
        assert members[0].name == BOT_NAME
        assert members[0].id == BOT_ID

    def test_conversations_update_activity(self):
        connector = BotConnector(self.credentials, base_url=SERVICE_URL)

        activity = models.Activity(
            type=models.ActivityType.message,
            channel_id=CHANNEL_ID,
            recipient=models.ChannelAccount(id=RECIPIENT_ID),
            from_property=models.ChannelAccount(id=BOT_ID),
            text='Updating activity...')

        response = connector.conversations.send_to_conversation(CONVERSATION_ID, activity)
        activity_id = response.id

        activity_update = models.Activity(
            type=models.ActivityType.message,
            channel_id=CHANNEL_ID,
            recipient=models.ChannelAccount(id=RECIPIENT_ID),
            from_property=models.ChannelAccount(id=BOT_ID),
            text='Activity updated.')

        response = connector.conversations.update_activity(CONVERSATION_ID, activity_id, activity_update)

        assert response is not None
        assert response.id == activity_id

    def test_conversations_reply_to_activity(self):
        connector = BotConnector(self.credentials, base_url=SERVICE_URL)

        activity = models.Activity(
            type=models.ActivityType.message,
            channel_id=CHANNEL_ID,
            recipient=models.ChannelAccount(id=RECIPIENT_ID),
            from_property=models.ChannelAccount(id=BOT_ID),
            text='Thread activity')

        response = connector.conversations.send_to_conversation(CONVERSATION_ID, activity)
        activity_id = response.id

        child_activity = models.Activity(
            type=models.ActivityType.message,
            channel_id=CHANNEL_ID,
            recipient=models.ChannelAccount(id=RECIPIENT_ID),
            from_property=models.ChannelAccount(id=BOT_ID),
            text='Child activity.')

        response = connector.conversations.reply_to_activity(CONVERSATION_ID, activity_id, child_activity)

        assert response is not None
        assert response.id != activity_id

    def test_conversations_delete_activity(self):
        connector = BotConnector(self.credentials, base_url=SERVICE_URL)

        activity = models.Activity(
            type=models.ActivityType.message,
            channel_id=CHANNEL_ID,
            recipient=models.ChannelAccount(id=RECIPIENT_ID),
            from_property=models.ChannelAccount(id=BOT_ID),
            text='Activity to be deleted..')

        response = connector.conversations.send_to_conversation(CONVERSATION_ID, activity)
        activity_id = response.id

        response = connector.conversations.delete_activity(CONVERSATION_ID, activity_id)

        assert response is None

    def test_conversations_get_activity_members(self):
        connector = BotConnector(self.credentials, base_url=SERVICE_URL)

        activity = models.Activity(
            type=models.ActivityType.message,
            channel_id=CHANNEL_ID,
            recipient=models.ChannelAccount(id=RECIPIENT_ID),
            from_property=models.ChannelAccount(id=BOT_ID),
            text='Test Activity')

        response = connector.conversations.send_to_conversation(CONVERSATION_ID, activity)

        members = connector.conversations.get_activity_members(CONVERSATION_ID, response.id)

        assert len(members) == 2
        assert members[0].name == BOT_NAME
        assert members[0].id == BOT_ID
