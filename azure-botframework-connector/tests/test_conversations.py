# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
from os.path import dirname, join, realpath

import pytest
from azure_devtools.scenario_tests import ReplayableTest, AzureTestError
from devtools_testutils import mgmt_settings_fake as fake_settings

from azure.botframework.connector import BotConnector
from azure.botframework.connectorauth import MicrosoftTokenAuthentication
from azure.botframework.connector import models

from authentication_stub import MicrosoftTokenAuthenticationStub

SERVICE_URL = 'https://facebook.botframework.com'
BOT_NAME = 'PcBotBuilderSample'
BOT_ID = '726774820806739'
RECIPIENT_ID = '946773412111690'
CONVERSATION_ID = '946773412111690-PcBotBuilderSample'

class ConversationTest(ReplayableTest):
    def __init__(self, method_name):
        super(ConversationTest, self).__init__(method_name)

    @property
    def credentials(self):
        if self.is_live:
            import app_creds_real
            # Define a "app_creds_real.py" file with your bot credentials as follows:
            # MICROSOFT_APP_ID = '...'
            # MICROSOFT_APP_PASSWORD = '...'
            return MicrosoftTokenAuthentication(app_creds_real.MICROSOFT_APP_ID, app_creds_real.MICROSOFT_APP_PASSWORD)
        else:
            return MicrosoftTokenAuthenticationStub('STUB_ACCESS_TOKEN')

    def test_conversations_create_conversation(self):
        connector = BotConnector(self.credentials, base_url=SERVICE_URL)

        create_conversation = models.ConversationParameters()
        bot = models.ChannelAccount(id=BOT_ID)
        create_conversation.bot = bot
        recipient = models.ChannelAccount(id=RECIPIENT_ID)
        create_conversation.members = [recipient]
        create_conversation.activity = models.Activity(
            type=models.ActivityType.message,
            channel_id='facebook',
            recipient=recipient,
            text='Hi there!')

        conversation = connector.conversations.create_conversation(
            create_conversation)

        assert conversation.id is not None

    def test_conversations_send_to_conversation(self):
        connector = BotConnector(self.credentials, base_url=SERVICE_URL)

        activity = models.Activity(
            type=models.ActivityType.message,
            channel_id='facebook',
            recipient=models.ChannelAccount(id=RECIPIENT_ID),
            from_property=models.ChannelAccount(id=BOT_ID),
            text='Hello again!')

        response = connector.conversations.send_to_conversation(
            CONVERSATION_ID, activity)

        assert response is not None

    def test_conversations_send_to_conversation_with_attachment(self):
        connector = BotConnector(self.credentials, base_url=SERVICE_URL)

        card1 = models.HeroCard(
            title='A static image',
            text='JPEG image',
            images=[
                models.CardImage(
                    url=
                    'https://docs.microsoft.com/en-us/bot-framework/media/designing-bots/core/dialogs-screens.png'
                )
            ])

        card2 = models.HeroCard(
            title='An animation',
            subtitle='GIF image',
            images=[
                models.CardImage(
                    url='http://i.giphy.com/Ki55RUbOV5njy.gif')
            ])

        activity = models.Activity(
            type=models.ActivityType.message,
            channel_id='facebook',
            recipient=models.ChannelAccount(id=RECIPIENT_ID),
            from_property=models.ChannelAccount(id=BOT_ID),
            # attachment_layout='carousel',
            attachments=[
                models.Attachment(
                    content_type='application/vnd.microsoft.card.hero',
                    content=card1),
                models.Attachment(
                    content_type='application/vnd.microsoft.card.hero',
                    content=card2),
            ])

        response = connector.conversations.send_to_conversation(
            CONVERSATION_ID, activity)

        assert response is not None

    def test_conversations_send_to_conversation_with_invalid_conversation_id_fails(self):

        with pytest.raises(
                models.error_response.ErrorResponseException) as excinfo:
            connector = BotConnector(self.credentials, base_url=SERVICE_URL)

            activity = models.Activity(
                type=models.ActivityType.message,
                channel_id='facebook',
                recipient=models.ChannelAccount(id=RECIPIENT_ID),
                from_property=models.ChannelAccount(id=BOT_ID),
                text='Error!')

            connector.conversations.send_to_conversation('123', activity)

        assert excinfo.value.error.error.code == 'ServiceError'
        assert 'cannot send messages to this id' in str(
            excinfo.value.error.error.message)

    def test_conversations_get_conversation_members(self):
        connector = BotConnector(self.credentials, base_url=SERVICE_URL)

        members = connector.conversations.get_conversation_members(CONVERSATION_ID)

        assert len(members) == 2
        assert members[0].name == BOT_NAME
        assert members[0].id == BOT_ID

